uniform float radius;
uniform vec4 diffuse;
uniform vec4 bg;

bool ray_intersect(vec3 orig, vec3 dir, inout float d, inout vec3 n, vec3 pos, float radius) {
  vec3 L = (pos - orig);
  float tca = dot(L , dir);
  float d2 = dot(L , L) - tca * tca;
  if (d2 > radius * radius) return false;
  float tcc = sqrt(radius * radius - d2);  // bottom len of triangle
  d = tca - tcc;
  float t1 = tca + tcc;
  if (d < 0.0) {
    d = t1;
  }
  if (d < 0.0) return false;

  n = normalize(dir * d + orig - pos);
  return true;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  // Build the Camera Ray
  float fov = radians(50.0);
  float x = (2.0 * (fragCoord.x + 0.5) / iResolution.x - 1.0) * tan(fov / 2.0);
  float y = (2.0 * (fragCoord.y + 0.5) / iResolution.y - 1.0) * tan(fov / 2.0) * iResolution.y / iResolution.x;
  vec3 ray_dir = normalize(vec3(x, y, -1));

  // Scene
  vec3  sphere_pos      = vec3(0, 1, 0);
  float sphere_radius   = radius;
  vec3  sphere_diff     = diffuse.rgb;
  vec3  light_pos       = vec3(1, -1, 1);
  float light_intensity = 1;

  sphere_pos.x = sin(iTime) * 0.2;

  // Render
  sphere_pos = view_transform(sphere_pos);
  light_pos = view_transform(light_pos);

  float d;
  vec3 n;
  vec3 color;

  if (ray_intersect(vec3(0), ray_dir, d, n, sphere_pos, sphere_radius)) {
    vec3 hit = ray_dir * d;
    vec3 dir_light = normalize(light_pos - hit);
    float diff = clamp(dot(dir_light, n), 0.0, 1.0) * light_intensity;
    color = sphere_diff * diff;
  } else {
    color = bg.rgb;
  }

  fragColor = vec4(color, 1);
}
